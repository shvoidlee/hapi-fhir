<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Data Model - HAPI FHIR</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<!-- The body of the document contains a number of sections -->
		<section name="Working with Resources">
			
			<macro name="toc">
			</macro>
			
			<p>
				Every resource type defined by FHIR has a corresponding 
				class, which contains a number of getters and setters for 
				the basic properties of that resource.
			</p>

			<p>
				HAPI tries to make populating objects easier, by providing lots of 
				convenience methods. For example, the Observation resource has an
				"issued" property which is of the FHIR "instant" type (a system time with
				either seconds or milliseconds precision). There are methods to
				use the actual FHIR datatype, but also convenience methods which
				use built-in Java types.
			</p>

			<macro name="snippet">
				<param name="id" value="datatypes" />
				<param name="file" value="examples/src/main/java/example/FhirDataModel.java" />
			</macro>

			<subsection name="Navigating Structures">
			
				<p>
					Most HAPI structures provide getters that automatically create
					child objects on access. This means it is simple to navigate 
					complex structures without needing to worry about instantiating
					child objects.
				</p>
			
				<macro name="snippet">
					<param name="id" value="nonNull" />
					<param name="file" value="examples/src/main/java/example/FhirDataModel.java" />
				</macro>

			</subsection>

			<subsection name="Coded/Enumerated Values">
			
				<p>
					There are many places in the FHIR specification where a "coded" string is
					used. This means that a code must be chosen from a list of allowable values.
				</p>
			
				<p>
					In these cases, HAPI tries to simplify the process by providing Java Enum
					types, which can be used to reduce complexity and provide compile-time
					checking.
				</p>
				
				<macro name="snippet">
					<param name="id" value="codes" />
					<param name="file" value="examples/src/main/java/example/FhirDataModel.java" />
				</macro>

			</subsection>
			
			<subsection name="Convenience Methods">
				
				<p>
					The FHIR data model is rich enough to meet common use cases, but sometimes
					that richness adds complexity. For example, a Patient may have multiple names
					(a preferred name, a nickname, etc.) and each of those names may have multiple
					last names, multiple prefixes, etc.
				</p>
			
				<p>
					The example below shows populating a name entry for a Patient. Note the
					use of the StringDt type, which encapsulates a regular String, but allows for
					extensions to be added.
				</p>
			
				<macro name="snippet">
					<param name="id" value="namesHard" />
					<param name="file" value="examples/src/main/java/example/FhirDataModel.java" />
				</macro>
			
				<p>
					HAPI also provides for simple setters that use Java primitive types
					and can be chained, leading to much simpler code.
				</p>
			
				<macro name="snippet">
					<param name="id" value="namesEasy" />
					<param name="file" value="examples/src/main/java/example/FhirDataModel.java" />
				</macro>
			
			</subsection>
			
		</section>
		
		<section name="Examples">
		
			<subsection name="Populating an Observation Resource">

				<p>
					The following example shows how to create an observation resource containing
					a numeric datatype.
				</p>
				<macro name="snippet">
					<param name="id" value="observation" />
					<param name="file" value="examples/src/main/java/example/FhirDataModel.java" />
				</macro>
			
			</subsection>
			
		</section>
		
	</body>

</document>
